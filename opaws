#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::Log;
use Mojo::JSON qw(decode_json encode_json);
use JSON; #needs cleanup
use Data::Dumper;
my $log = Mojo::Log->new;

# Documentation browser under "/perldoc"
plugin 'PODRenderer';

=head2 routes
  predefined routes and proper handling:
=cut

post '/' => sub {
  my $c = shift;
  my $response;
  my $wscall = $c->req->json;
  my $intent = $wscall->{request}->{intent}->{name};
  my $slots  = $wscall->{request}->{intent}->{slots}; 

  $log->debug(Dumper($wscall));

  if ( $intent eq "cloneJob" ) {
    my $src_host = $slots->{src}->{value};
    my $job_id = $slots->{id}->{value};
    $src_host = "https://openqa.".$src_host.".org";

    $response = clone_job($job_id, $src_host);
    $log->debug($response);
    
    # should be
    #$json = generate_json_response($response);
     my $json = '{
        "version": "0.1",
        "response": {
          "outputSpeech": {
            "type": "PlainText",
            "text": "'.$response.'"
          }
        }
      }';

   # "ssml": "<speak>'.$response.'</speak>"
    $log->debug($json);
   my $ws_response = decode_json($json);
    
    $log->debug(Dumper($ws_response));
    $c->render(json => $ws_response);
    $c->rendered(200);
    $response = undef;

  }
  #$c->render(template => 'index') unless ($response);
};

get '/restart/job/:id' => sub {
  my $c = shift;
  my $job_id = $c->param('id');
  my $cmd = "/usr/share/openqa/script/client --json-output jobs/$job_id/restart post";
  $log->debug($cmd);
  my $response = decode_json(`$cmd`);
  my @jobresult = $response->{result};
  # $job = decode_json($job);
  #$log->debug(Dumper($jobresult[0]));
  #$log->debug(scalar \@jobresult);

  my $json = generate_json_response("I have restarted job $job_id for you");
  $log->debug("Generated json:\n" . $json);

  if ($jobresult[0]){
    $c->stash(jobs => $response->{result});
    $c->stash(parent_id => $job_id);
    $c->stash(json => $json);
    $c->render(template => 'restart_job');
  } else {
    $c->redirect_to("/");
  }

};

=head2 helper functions
  functions for actually interacting with stuff
=cut

sub clone_job {
  my ($job_id, $src_host) = @_;
  my $cmd = "/usr/share/openqa/script/clone_job.pl --host http://openqa.eureka.lab.zarate.net.ve --skip-download --from $src_host $job_id";
  $log->debug($cmd);
  my $json = generate_json_response("Cloned job $job_id");
  my $response = `$cmd`;
  $response =~ s/#/Number /;
  ($response) = split /:/, $response;
  return $response;
}

sub generate_json_response {
    my $input = shift;
    my $raw_response = {
        response => {
            outputSpeech => {
                type => "SSML",
                ssml => "<speak>$input</speak>",
                }
            }
        };

    return JSON->new->pretty->encode($raw_response);
}

app->secrets(["Skynet is comming! :)"]);
app->start;

# All responses should be a combination between json and ssml tags
# https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference
__DATA__

@@ index.html.ep
% layout 'default';
% title 'OpenQA Alexa Web Service (OpAWS)';
<h1>Welcome to OpAWS</h1>

@@ clone.html.ep
% layout 'default';
% title 'Clone job';
<h1>Clone Job</h1>
<h2><%= $response %></h2>
<p><%= $json %><p>

@@ restart_job.html.ep
% layout 'default';
% title 'restart job';
<h1>job <%= $parent_id %> restarted</h1>
% for my $job (@$jobs) {
    <p>Job <%=$job %> has been triggered<p>
% }
<p><%= $json %><p>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
