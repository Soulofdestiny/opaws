#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::Log;
use Mojo::JSON qw(decode_json encode_json from_json);
#use JSON;
use Data::Dumper;
my $log = Mojo::Log->new;

# Documentation browser under "/perldoc"
plugin 'PODRenderer';

=head2 routes
  predefined routes and proper handling:
=cut

post '/' => sub {
  my $c = shift;
  my $response;
  #extract
  my $wscall = $c->req->json;
  my $intent = $wscall->{request}->{intent}->{name};
  my $slots  = $wscall->{request}->{intent}->{slots}; 


  #$log->debug("wscall: ". Dumper($wscall));

  if ( $intent eq "cloneJob" ) {

    my $src_host = $slots->{src}->{value};
    my $job_id = $slots->{id}->{value};

    $response = clone_job($job_id, $src_host);
    my $ws_response = generate_json_response($response);
    $log->debug("ws_response: ".$ws_response);
    render_json($c, $ws_response);
  }
  elsif ( $intent eq "restartJob" ) {
    my $job_id = $slots->{id}->{value};
    $response = restart_job($job_id);
    my $ws_response = generate_json_response($response);
    $log->debug("ws_response: ".$ws_response);
    render_json($c, $ws_response);
  }
  elsif ( $intent eq "deleteJob" ) {
    my $job_id = $slots->{id}->{value};
    $response = delete_job($job_id);
    my $ws_response = generate_json_response($response);
    $log->debug("ws_response: ".$ws_response);
    render_json($c, $ws_response);
  }
  elsif ( $intent eq "cancelJob" ) {
    my $job_id = $slots->{id}->{value};
    $response = cancel_job($job_id);
    my $ws_response = generate_json_response($response);
    $log->debug("ws_response: ".$ws_response);
    render_json($c, $ws_response);
  }

};


get '/rss/job/:id' => sub {
  my $c = shift;
  #extract
  my $wscall = $c->req->json;
  my $intent = $wscall->{request}->{intent}->{name} || 0;
  my $slots  = $wscall->{request}->{intent}->{slots} || 0; 
  my @info; 
  $log->debug(Dumper(\$c->req));
  $log->debug($wscall);

  my $ws_response = generate_rss_json(@info);

 render_json($c, $ws_response);

};

=head2 helper functions
  functions for actually interacting with stuff
=cut

my $host = "http://openqa.eureka.lab.zarate.net.ve";

sub delete_job {
  my ($job_id) = @_;
  my $response = '';
  my $cmd = "/usr/share/openqa/script/client --host $host jobs/$job_id delete";
  my $ret = `$cmd`;
  $log->debug("cmd: ".$cmd);
  $log->debug("return: ".$ret);
  if ($ret =~ /.*error.*/) {
      $response = "I can not delete job $job_id";
      $log->debug("response: ".$response);
  }
  else {
    $response = "Job $job_id deleted";
    $log->debug("response: ".$response);
  }
  return $response;
}

sub cancel_job {
  my ($job_id) = @_;
  my $job_query = "/usr/share/openqa/script/client --host $host --json-output jobs/$job_id get | jq -r '.job.state' | tr -d '\\\n'"; 
  $log->debug("job_query: ".$job_query);
  my $job_state = `$job_query`;
  my $response = '';
  $log->debug("job_state: ".$job_state);
  if ($job_state =~ /scheduled|running/) {
    my $cmd = "/usr/share/openqa/script/client --host $host jobs/$job_id/cancel post";
    my $ret = `$cmd`;

    if ($ret=~ /.*result.*/){
      $response = "Cancelled $job_state job $job_id";
      $log->debug("response: ".$response);
    } 

    if ($ret=~ /.*error.*/) {
      $response = "I can not cancel job $job_id because there was an error";
      $log->debug("response: ".$response);
    }

  } else {
      $response = "I can not cancel job $job_id because it is in state $job_state";
      $log->debug("response: ".$response);
  }

  return $response;
}

sub restart_job {
  my ($job_id) = @_;
  my $cmd = "/usr/share/openqa/script/client --host $host jobs/$job_id/restart post";

  $log->debug("cmd: ".$cmd);
  my $response = `$cmd`;
  ($response) = split /,/, $response;
  $response =~ s/[^0-9]//g;
  if (!$response) {
      $response = "Sorry, I was not able to restart job $job_id";
  }
  else {
    $response = "Restart Job $job_id as ".$response;
  }
  $log->debug("response: ".$response);
  return $response;
}

sub clone_job {
  my ($job_id, $src_host) = @_;
  $src_host = "https://openqa.".$src_host.".org";
  my $cmd = "/usr/share/openqa/script/clone_job.pl --host $host --skip-download --from $src_host $job_id";

  $log->debug("cmd: ".$cmd);
  my $response = `$cmd`;
  if ($response =~ /^Created job .*/) {
    $response =~ s/#/Number /;
    ($response) = split /:/, $response;
  }
  else {
    $response = "Sorry, I was not able to clone the job";
  }
  $log->debug("response: ".$response);
  return $response;
}

sub render_json {
    my ($c, $resp) = @_;
    $c->render(json => $resp);
    $c->rendered(200);
}

sub generate_json_response {
    my $input = shift;
    my $json = '{
       "version": "0.1",
       "response": {
         "outputSpeech": {
           "type": "PlainText",
           "text": "'.$input.'"
         }
       }
     }';
     $log->debug(Dumper($json));
    
     return from_json($json);
}

sub generate_rss_json {
  my $imput = shift;
  my $json = '
[
  {
    "uid": "EXAMPLE_CHANNEL_MULTI_ITEM_JSON_TTS_1",
    "updateDate": "2016-04-10T00:00:00.0Z",
    "titleText": "Multi Item JSON (TTS)",
    "mainText": "This channel has multiple TTS JSON items. This is the first item."
   },
  {
    "uid": "EXAMPLE_CHANNEL_MULTI_ITEM_JSON_TTS_2",
    "updateDate": "2016-04-10T00:00:00.0Z",
    "titleText": "Multi Item JSON (TTS)",
    "mainText": "This channel has multiple TTS JSON items. This is the second item."
  }
]
';
  return from_json($json);


}

app->secrets(["Skynet is comming! :)"]);
app->start;

# All responses should be a combination between json and ssml tags
# https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference
__DATA__

@@ index.html.ep
% layout 'default';
% title 'OpenQA Alexa Web Service (OpAWS)';
<h1>Welcome to OpAWS</h1>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
